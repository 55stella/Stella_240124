{
	"info": {
		"_postman_id": "d7bff8c8-030c-4fb1-b69b-ffbb98890ddb",
		"name": "Take Home Assignment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26486901"
	},
	"item": [
		{
			"name": "Create Employer",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 200', function () {\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"pm.test('Employer created successfully', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.equal('success');\r",
							"    pm.expect(jsonData.data.status).to.equal('success');\r",
							"    pm.expect(jsonData.data.data.name).to.equal('Sample Name');\r",
							"    pm.expect(jsonData.data.data.salary).to.equal('1230999');\r",
							"    pm.expect(jsonData.data.data.age).to.equal('52');\r",
							"    pm.expect(jsonData.data.data).to.have.property('id');\r",
							"    pm.expect(jsonData.data).to.have.property('id');\r",
							"})\r",
							"\r",
							"pm.test('Message indicates successful record addition', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.equal('Successfully! Record has been added.');\r",
							"})\r",
							"\r",
							"pm.test('Strict-Transport-Security header is present', function () {\r",
							"    pm.response.to.have.header('Strict-Transport-Security');\r",
							"})\r",
							"\r",
							"pm.test('Content-Security-Policy header is present', function () {\r",
							"    pm.response.to.have.header('Content-Security-Policy');\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"status\": \"success\",\r\n    \"data\": {\r\n        \"name\": \"Sample Name\",\r\n        \"salary\": \"1230999\",\r\n        \"age\": \"52\",\r\n        \"id\": 25\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://dummy.restapiexample.com/api/v1/create",
					"protocol": "https",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employees",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Positive test for validating the response structure\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has data field\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data field is an array\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"All records have required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    jsonData.data.forEach(function (record) {\r",
							"        pm.expect(record).to.have.property(\"id\");\r",
							"        pm.expect(record).to.have.property(\"employee_name\");\r",
							"        pm.expect(record).to.have.property(\"employee_salary\");\r",
							"        pm.expect(record).to.have.property(\"employee_age\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Message indicates successful fetching of records\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.equal(\"Successfully! All records has been fetched.\");\r",
							"});\r",
							"\r",
							"// Security test to check for the presence of authentication headers\r",
							"pm.test(\"Authorization header is present\", function () {\r",
							"    const authHeader = pm.request.headers.get('Authorization');\r",
							"    pm.expect(authHeader).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test('Strict-Transport-Security header is present', function () {\r",
							"    pm.response.to.have.header('Strict-Transport-Security');\r",
							"})\r",
							"\r",
							"pm.test('Content-Security-Policy header is present', function () {\r",
							"    pm.response.to.have.header('Content-Security-Policy');\r",
							"})\r",
							"\r",
							"\r",
							"// Security test to confirm the presence of authentication mechanism or key in headers\r",
							"pm.test(\"Authentication mechanism or key is present in headers\", function () {\r",
							"    const authHeader = pm.request.headers.get('Authorization');\r",
							"\r",
							"    // Check if authHeader is not null or undefined before checking its content\r",
							"    if (authHeader) {\r",
							"        pm.expect(authHeader).to.include(\"Bearer\"); // Assuming Bearer token is used\r",
							"    } else {\r",
							"        pm.expect.fail(\"Authorization header is missing\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/employees",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employees"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Employee By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Positive test for validating the response structure\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test script to check success response when a valid employee ID is provided\r",
							"pm.test(\"Check for success response with valid required fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    // Assuming the success response structure\r",
							"    pm.expect(jsonData.status).to.equal(\"success\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"employee_name\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"employee_salary\");\r",
							"    pm.expect(jsonData.data).to.have.property(\"employee_age\");\r",
							"    pm.expect(jsonData.message).to.equal(\"Successfully! Record has been fetched.\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message indicates successful fetching of records\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.message).to.equal(\"Successfully! Record has been fetched.\");\r",
							"});\r",
							"\r",
							"// Security test to check for the presence of authentication headers\r",
							"pm.test(\"Authorization header is present\", function () {\r",
							"    const authHeader = pm.request.headers.get('Authorization');\r",
							"    pm.expect(authHeader).to.not.be.null;\r",
							"});\r",
							"\r",
							"pm.test('Strict-Transport-Security header is present', function () {\r",
							"    pm.response.to.have.header('Strict-Transport-Security');\r",
							"})\r",
							"\r",
							"pm.test('Content-Security-Policy header is present', function () {\r",
							"    pm.response.to.have.header('Content-Security-Policy');\r",
							"})\r",
							"\r",
							"\r",
							"// Security test to confirm the presence of authentication mechanism or key in headers\r",
							"pm.test(\"Authentication mechanism or key is present in headers\", function () {\r",
							"    const authHeader = pm.request.headers.get('Authorization');\r",
							"\r",
							"    // Check if authHeader is not null or undefined before checking its content\r",
							"    if (authHeader) {\r",
							"        pm.expect(authHeader).to.include(\"Bearer\"); // Assuming Bearer token is used\r",
							"    } else {\r",
							"        pm.expect.fail(\"Authorization header is missing\");\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://dummy.restapiexample.com/api/v1/employee/5",
					"protocol": "http",
					"host": [
						"dummy",
						"restapiexample",
						"com"
					],
					"path": [
						"api",
						"v1",
						"employee",
						"5"
					]
				}
			},
			"response": []
		}
	]
}